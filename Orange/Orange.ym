%glr-parser
%define api.pure

%code requires {	
	#define YYDEBUG 1
	union YYSTYPE;
	#ifndef YY_TYPEDEF_YY_SCANNER_T
	typedef void * yyscan_t ;
	#endif
	
	#import "OrangeTarget.h"
	#import "OrangeExpression.h"
	#import "OrangeBinding.h"
	#import "OrangeScript_Private.h"

	#import "NSObject+Orange.h"
	#import <objc/runtime.h>
	
	int yylex ( union YYSTYPE * lvalp, yyscan_t scanner, va_list argList );
	void yyerror( yyscan_t scanner, id selfObject, va_list argList, OrangeScript ** result, const char * error ) ;
	
	typedef OrangeExpression * ExprPtr ;
	typedef OrangeTarget * TargetPtr ;
}

%parse-param { yyscan_t scanner }
%parse-param { id selfObject }
%parse-param { va_list argList }
%parse-param { OrangeScript ** result }
%lex-param { yyscan_t scanner }
%lex-param { va_list argList }

%token <number> FLOAT
%token <string> KEY
%token <string> STRING
%token BIND "<="
%token SELF "@"
%token SEQ ".."
%token MAX
%token MIN
%token SUM
%token SIZE
%token RECT
%token INSETS
%token POINT
%token <object>			OBJ;
%token <string>			WORD
%token <integer>		INTEGER ;

%type <target>			target
%type <string>			keypath ;
%type <objectEvaluator>	object ;
%type <array>			exprlist ;
%type <expression>		expr ;
%type <context>			statement ;
%type <array>			statements ;
%type <binding>			binding ;
%type <array>			array ;
%type <array>			script ;	// array of OrangeBinding, OrangeTriggerScope, OrangeBindingScope
%type <array>			triggerlist ;
%type <trigger>			trigger ;

%union {
	NSNumber *					number ;
	SEL							selector;
	NSString *					key ;
	NSString *					string ;
	id							object ;
	id (^objectEvaluator)(id scope) ;
	OrangeExpression *			expression ;
	OrangeTarget *				target ;
	OrangeBinding *				binding ;
	OrangeBindingScope *		scope ;
	OrangeTriggerScope *		trigger ;
	NSArray *					array ;
//	NSOrderedSet *				orderedSet ;
	OrangeEvaluationContext *	context ;
	NSInteger					integer ;
}

%%

toplevel:		/* blank */
				{
					if ( result ) { *result = nil; } ;
				}
				| script
				{
					OrangeScript * script = [ [ [ OrangeScript alloc ] init ] autorelease ] ;
					script.contained = $1 ;
					*result = script ;
				}
;

script:			statement
				{
					$$ = [ NSArray arrayWithObject:$1 ] ;
				}
				| script statement
				{
					$$ = [ $1 arrayByAddingObject:$2 ] ;
				}
;

statement:		binding
				| target '{' statements '}'
				{
					OrangeEvaluationContext * scope = [ [ [ OrangeEvaluationContext alloc ] init ] autorelease ] ;
					scope.target = $1 ;
					scope.contained = $3 ;
					
					$$ = scope ;
				}
				| trigger '{' statements '}'
				{
					OrangeTriggerScope * scope = $1 ;
					scope.contained = $3 ;
					$$ = scope ;
				}
;

trigger:		'<' triggerlist '>'
				{
					OrangeTriggerScope * scope = [ [ [ OrangeTriggerScope alloc ] init ] autorelease ] ;
					scope.triggers = $2 ;
					
					$$ = scope; 
				}				

triggerlist:	WORD
				{
					$$ = [ NSArray arrayWithObject:$1 ] ;
				}
				| triggerlist WORD
				{
					$$ = [ $1 arrayByAddingObject:$2 ] ;
				}
;

statements:		statement
				{
					$$ = [ NSArray arrayWithObject:$1 ] ;
				}
				| statements ';' statement
				{
					$$ = [ $1 arrayByAddingObject:$3 ] ;
				}
				| statements ',' statement
				{
					$$ = [ $1 arrayByAddingObject:$3 ] ;
				}
;

binding:		target "<=" expr
				{
					OrangeBinding * binding = [ [ [ OrangeBinding alloc ] init ] autorelease ] ;
					binding.target = $1 ;
					binding.expression = $3 ;
					
					$$ = binding ;
				}
;

expr:			FLOAT						{ $$ = [ [ OrangeConstant alloc ] initWithValue:$1 ] ; }
				| STRING					{ $$ = [ [ OrangeConstant alloc ] initWithValue:$1 ] ; }
				| '+' expr expr				
				{
					ExprPtr expr0 = $2, expr1 = $3 ;
					$$ = [ OrangeExpression expressionWithFloatEvaluator:^(id scope){
						return [ expr0 floatResult:scope ] + [ expr1 floatResult:scope ] ;
					}];
				}
				| '-' expr expr				
				{ 
					ExprPtr expr0 = $2, expr1 = $3 ;
					$$ = [ OrangeExpression expressionWithFloatEvaluator:^(id scope){
						return [ expr0 floatResult:scope ] - [ expr1 floatResult:scope ] ;
					}];
				}
				| '*' expr expr				
				{ 
					ExprPtr expr0 = $2, expr1 = $3 ;
					$$ = [ OrangeExpression expressionWithFloatEvaluator:^(id scope){
						return [ expr0 floatResult:scope ] * [ expr1 floatResult:scope ] ;
					}];
				}
				| SUM expr
				{
					ExprPtr expr = $2 ;
					$$ = [ OrangeExpression expressionWithFloatEvaluator:^(id scope){
						__block CGFloat sum = 0.0f ;
						[ [ expr result:scope ] enumerateObjectsUsingBlock:^(OrangeExpression * expr, NSUInteger idx, BOOL *stop) {
							sum += [ expr floatResult:scope ] ;
						}];
						return sum ;
					}];
				}
				| MIN expr
				{
					ExprPtr expr = $2 ;				
					$$ = [ OrangeExpression expressionWithFloatEvaluator:^(id scope){
						__block CGFloat min = 0.0f ;
						[ [ expr result:scope ] enumerateObjectsUsingBlock:^(OrangeExpression * expr, NSUInteger idx, BOOL *stop) {
							min = MIN( min, [ expr floatResult:scope ] ) ;
						}];
						return min ;
					}];
				}
				| MAX expr
				{
					ExprPtr expr = $2 ;
					$$ = [ OrangeExpression expressionWithFloatEvaluator:^(id scope){
						__block CGFloat max = 0.0f ;
						[ [ expr result:scope ] enumerateObjectsUsingBlock:^(OrangeExpression * expr, NSUInteger idx, BOOL *stop) {
							max = MAX( max, [ expr floatResult:scope ] ) ;
						}];
						return max ;
					}];
				}
				| array 
				{ 
					[ NSException raise:OrangeParserException format:@"array literal not supported yet"];
				}
				| SIZE expr expr
				{	
					ExprPtr expr0 = $2, expr1 = $3 ;
					$$ = [ OrangeExpression expressionWithSizeEvaluator:^(id scope){
						return (CGSize){ [ expr0 floatResult:scope ], [ expr1 floatResult:scope ] } ;
					}];
				}
				| RECT expr expr expr expr
				{	
					ExprPtr expr0 = $2, expr1 = $3, expr2 = $4, expr3 = $5 ;
					$$ = [ OrangeExpression expressionWithRectEvaluator:^(id scope){
						return (CGRect){ { [ expr0 floatResult:scope ], [ expr1 floatResult:scope ] },
						{ [ expr2 floatResult:scope ], [ expr3 floatResult:scope ] } } ;
					} ];
				}
				| INSETS expr expr expr expr
				{
					[ NSException raise:OrangeParserException format:@"token INSETS not supported yet"];
				}
				| target
				{
					TargetPtr t = $1 ;
					$$ = [ OrangeExpression expressionWithEvaluator:^(id scope){
						return [ t resolve:scope ] ;
					} ] ;
				}
				| '[' expr WORD ']'
				| '[' expr selectorWords ']'
;

selectorWords:	WORD ':' expr
				| selectorWords WORD ':' expr
;

exprlist:		expr						
				{ 
					$$ = [ NSArray arrayWithObject:$1 ] ; 
				}
				| exprlist expr				
				{ 
					$$ = [ $1 arrayByAddingObject:$2 ] ; 
				}
;

object:			OBJ
				{ 
					id theObject = $1 ;
					$$ = ^(id scope){ return theObject ; } ; 
				}
				| SELF						
				{ 
					$$ = ^(id scope){ return selfObject ; } ; 
				}
				| target '[' INTEGER ']'	
				{
					TargetPtr t = $1 ;
					NSInteger index = $3 ;
					$$ = ^(id scope){ 
						return [ [ t resolve:scope ] objectAtIndex:index ] ; 
					} ;
				}
				| '[' INTEGER ']'	
				{
					NSInteger index = $2 ;
					$$ = ^(id scope){ 
						return [ scope objectAtIndex:index ] ; 
					} ;
				}
				| '[' INTEGER ".." ']'	
				{
					yyerror( scanner, selfObject, argList, result, "Array slices not yet supported\n") ;
					YYERROR;
				}
;

target:			keypath					
				{ 
					TargetPtr t = [ [ OrangeTarget alloc ] init ] ;
					t.getBaseObject = ^(id scope){ 
						return scope ; 
					} ;
					t.keypath = $1 ;
					
					$$ = t;
				}
				| object keypath			
				{ 
					TargetPtr t = [ [ OrangeTarget alloc ] init ] ;
					id (^obj)(id scope) = $1 ;
					t.getBaseObject = ^(id scope){ 
						return obj(scope) ; 
					} ;
					t.keypath = $2 ;
					
					$$ = t ;
				}
;

keypath:		KEY
				| keypath KEY				
				{ 
					$$ = [ $1 stringByAppendingFormat:@".%@", $2 ] ; 
				}
;

array:			'[' exprlist ']'			{ $$ = $2 ; }
;

%%
